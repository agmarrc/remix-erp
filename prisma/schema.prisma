// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(uuid())
  email   String   @unique
  name    String
  passwordHash String
  role Role @relation(fields: [roleId], references: [id])
  roleId String
  recovery Recovery?
  cataloguePermissions CataloguePermission[]
  companyPermissions CompanyPermission[]
  locationPermissions LocationPermission[]
  modulePermissions ModulePermission[]
}

model Recovery {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Role {
  id    String   @id @default(uuid())
  privileges Int @unique
  description String
  users User[]
}

model CataloguePermission {
  id String @id @default(uuid())
  user User@relation(fields: userId, references: [id], onDelete: Cascade)
  userId String
  catalogue Catalogue @relation(fields: catalogueId, references: [id], onDelete: Cascade)
  catalogueId String
  create Boolean @default(false)
  edit Boolean @default(false)
  destroy Boolean @default(false)
}

model CompanyPermission {
  id String @id @default(uuid())
  user User@relation(fields: userId, references: [id], onDelete: Cascade)
  userId String
  company Company @relation(fields: companyId, references: [id], onDelete: Cascade)
  companyId String
  create Boolean @default(false)
  edit Boolean @default(false)
  destroy Boolean @default(false)
}

model LocationPermission {
  id String @id @default(uuid())
  user User@relation(fields: userId, references: [id], onDelete: Cascade)
  userId String
  location Location @relation(fields: locationId, references: [id], onDelete: Cascade)
  locationId String
  create Boolean @default(false)
  edit Boolean @default(false)
  destroy Boolean @default(false)
}

model ModulePermission {
  id String @id @default(uuid())
  user User@relation(fields: userId, references: [id], onDelete: Cascade)
  userId String
  module Module @relation(fields: moduleId, references: [id], onDelete: Cascade)
  moduleId String
  create Boolean @default(false)
  edit Boolean @default(false)
  destroy Boolean @default(false)
}

model Catalogue {
  id      String   @id @default(uuid())
  name    String
  companies Company[]
  locations Location[]
  modules Module[]

  permissions CataloguePermission[]
}

model Company {
  id      String   @id @default(uuid())
  name    String

  locations Location[]

  catalogue Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  catalogueId String
  
  permissions CompanyPermission[]
}

model Location {
  id      String   @id @default(uuid())
  name    String
  latitude String
  longitude String
  placeName String
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  
  modules Module[]
  
  catalogue Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  catalogueId String

  permissions LocationPermission[]
}

model Module {
  id      String   @id @default(uuid())
  name    String
  workers Int
  
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  
  catalogue Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  catalogueId String

  permissions ModulePermission[]
}
